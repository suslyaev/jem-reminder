import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ChatMemberUpdated
from aiogram.enums import ChatMemberStatus
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
import dateparser
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from services.repositories import UserRepo, GroupRepo, RoleRepo, NotificationRepo, EventRepo, EventNotificationRepo, PersonalEventNotificationRepo, DispatchLogRepo
from config import BOT_TOKEN, SUPERADMIN_ID


logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –†–æ–ª–∏ ‚Üí —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
ROLE_RU = {
    'owner': '–í–ª–∞–¥–µ–ª–µ—Ü',
    'admin': '–ê–¥–º–∏–Ω',
    'member': '–£—á–∞—Å—Ç–Ω–∏–∫',
    'superadmin': '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω',
}

# –ü–∞–º—è—Ç—å –æ–∂–∏–¥–∞–Ω–∏–π (–ø—Ä–æ—Å—Ç–∞—è in-memory)
AWAITING_NOTIF_ADD: dict[int, dict] = {}  # user_id -> {gid, edit_chat_id, edit_message_id, prompt_message_id}
AWAITING_EVENT_CREATE: dict[int, dict] = {}  # user_id -> {gid, step, name?, time?, edit_chat_id, edit_message_id, prompt_message_id}
AWAITING_EVENT_EDIT: dict[int, dict] = {}    # user_id -> {eid, gid, mode: 'rename'|'retime', prompt_message_id, edit_chat_id, edit_message_id}
AWAITING_ADMIN_INPUT: dict[int, dict] = {}  # user_id -> {gid, mode: 'add'|'remove', type?: 'id'|'username'|'phone', edit_chat_id, edit_message_id, prompt_message_id}
AWAITING_EVENT_NOTIF: dict[int, dict] = {}  # user_id -> {eid, gid, edit_chat_id, edit_message_id, prompt_message_id}
AWAITING_PERSONAL_NOTIF: dict[int, dict] = {}  # user_id -> {eid, gid, edit_chat_id, edit_message_id, prompt_message_id}

# –ï–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–º–µ–Ω—é –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MENU_STATE: dict[int, dict] = {}  # user_id -> {chat_id, message_id}

async def set_menu_message(user_id: int, chat_id: int, text: str, markup: types.InlineKeyboardMarkup | None):
    state = MENU_STATE.get(user_id)
    if state and state.get('chat_id') == chat_id:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
        try:
            await bot.edit_message_text(text, chat_id=chat_id, message_id=state['message_id'], reply_markup=markup)
            return
        except Exception:
            pass
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
    msg = await bot.send_message(chat_id, text, reply_markup=markup)
    MENU_STATE[user_id] = {'chat_id': chat_id, 'message_id': msg.message_id}

async def safe_answer(callback: types.CallbackQuery) -> None:
    try:
        await callback.answer()
    except Exception:
        # Ignore expired/invalid query id errors
        pass

async def refresh_personal_notifications_view(message: types.Message, event_id: int, group_id: int, user_id: int):
    """Refresh the personal notifications view for an event."""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    # Get event info
    ev = EventRepo.get_by_id(event_id)
    if not ev:
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    _id, name, time_str, group_id, resp_uid = ev
    
    # Get personal notifications
    notifs = PersonalEventNotificationRepo.list_by_user_and_event(user_id, event_id)
    
    kb = InlineKeyboardBuilder()
    lines = [f"üì± –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è \"{name}\""]
    lines.append(f"–í—Ä–µ–º—è: {format_event_time_display(time_str)}")
    lines.append("")
    
    if notifs:
        lines.append("–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        for notif_id, time_before, time_unit, message_text in notifs:
            time_display = format_duration_ru(time_before, time_unit)
            notification_time = calculate_notification_time(time_str, time_before, time_unit)
            lines.append(f"‚Ä¢ {time_display} - –ß–µ—Ä–µ–∑ {time_display} –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            lines.append(f"  üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è: {notification_time}")
            kb.row(types.InlineKeyboardButton(text=f"‚ùå {time_display}", callback_data=f"evt_personal_notif_del:{notif_id}:{event_id}:{group_id}"))
    else:
        lines.append("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    lines.append("")
    lines.append("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
    
    # Add quick buttons
    kb.row(
        types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:1:days"),
        types.InlineKeyboardButton(text="2 –¥–Ω—è", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:2:days"),
        types.InlineKeyboardButton(text="3 –¥–Ω—è", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:3:days")
    )
    kb.row(
        types.InlineKeyboardButton(text="1 —á–∞—Å", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:1:hours"),
        types.InlineKeyboardButton(text="2 —á–∞—Å–∞", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:2:hours"),
        types.InlineKeyboardButton(text="30 –º–∏–Ω", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:30:minutes")
    )
    kb.row(types.InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ", callback_data=f"evt_personal_notif_add_free:{event_id}:{group_id}"))
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"evt_open:{event_id}:{group_id}"))
    
    text = "\n".join(lines)
    await bot.edit_message_text(text, chat_id=message.chat.id, message_id=message.message_id, reply_markup=kb.as_markup())

async def refresh_event_notifications_view(message: types.Message, event_id: int, group_id: int, user_id: int):
    """Refresh the event notifications view."""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    # Get event info
    ev = EventRepo.get_by_id(event_id)
    if not ev:
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    _id, name, time_str, group_id, resp_uid = ev
    
    # Get event notifications
    notifs = EventNotificationRepo.list_by_event(event_id)
    
    kb = InlineKeyboardBuilder()
    lines = [f"üîî –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è \"{name}\""]
    lines.append(f"–í—Ä–µ–º—è: {format_event_time_display(time_str)}")
    lines.append("")
    
    if notifs:
        lines.append("–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:")
        for notif_id, time_before, time_unit, message_text in notifs:
            time_display = format_duration_ru(time_before, time_unit)
            notification_time = calculate_notification_time(time_str, time_before, time_unit)
            lines.append(f"‚Ä¢ {time_display} - –ß–µ—Ä–µ–∑ {time_display} –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            lines.append(f"  üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è: {notification_time}")
            # Only show delete button if user can edit
            if can_edit_event_notifications(user_id, event_id):
                kb.row(types.InlineKeyboardButton(text=f"‚ùå {time_display}", callback_data=f"evt_notif_del:{notif_id}:{event_id}:{group_id}"))
    else:
        lines.append("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π")
    
    # Only show add buttons if user can edit
    if can_edit_event_notifications(user_id, event_id):
        lines.append("")
        lines.append("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ:")
        
        # Add quick buttons
        kb.row(
            types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data=f"evt_notif_add:{event_id}:{group_id}:1:days"),
            types.InlineKeyboardButton(text="2 –¥–Ω—è", callback_data=f"evt_notif_add:{event_id}:{group_id}:2:days"),
            types.InlineKeyboardButton(text="3 –¥–Ω—è", callback_data=f"evt_notif_add:{event_id}:{group_id}:3:days")
        )
        kb.row(
            types.InlineKeyboardButton(text="1 —á–∞—Å", callback_data=f"evt_notif_add:{event_id}:{group_id}:1:hours"),
            types.InlineKeyboardButton(text="2 —á–∞—Å–∞", callback_data=f"evt_notif_add:{event_id}:{group_id}:2:hours"),
            types.InlineKeyboardButton(text="30 –º–∏–Ω", callback_data=f"evt_notif_add:{event_id}:{group_id}:30:minutes")
        )
        kb.row(types.InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ", callback_data=f"evt_notif_add_free:{event_id}:{group_id}"))
    
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"evt_open:{event_id}:{group_id}"))
    
    text = "\n".join(lines)
    await bot.edit_message_text(text, chat_id=message.chat.id, message_id=message.message_id, reply_markup=kb.as_markup())

# Variants that refresh by explicit chat/message ids to avoid constructing Message objects
async def refresh_personal_notifications_view_ids(edit_chat_id: int, edit_message_id: int, event_id: int, group_id: int, user_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    ev = EventRepo.get_by_id(event_id)
    if not ev:
        return
    _id, name, time_str, group_id, resp_uid = ev
    notifs = PersonalEventNotificationRepo.list_by_user_and_event(user_id, event_id)
    kb = InlineKeyboardBuilder()
    lines = [f"üì± –õ–∏—á–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è \"{name}\""]
    lines.append(f"–í—Ä–µ–º—è: {format_event_time_display(time_str)}")
    lines.append("")
    if notifs:
        lines.append("–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        for notif_id, time_before, time_unit, message_text in notifs:
            time_display = format_duration_ru(time_before, time_unit)
            notification_time = calculate_notification_time(time_str, time_before, time_unit)
            lines.append(f"‚Ä¢ {time_display} - –ß–µ—Ä–µ–∑ {time_display} –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            lines.append(f"  üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è: {notification_time}")
            kb.row(types.InlineKeyboardButton(text=f"‚ùå {time_display}", callback_data=f"evt_personal_notif_del:{notif_id}:{event_id}:{group_id}"))
    else:
        lines.append("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    lines.append("")
    lines.append("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
    kb.row(
        types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:1:days"),
        types.InlineKeyboardButton(text="2 –¥–Ω—è", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:2:days"),
        types.InlineKeyboardButton(text="3 –¥–Ω—è", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:3:days")
    )
    kb.row(
        types.InlineKeyboardButton(text="1 —á–∞—Å", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:1:hours"),
        types.InlineKeyboardButton(text="2 —á–∞—Å–∞", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:2:hours"),
        types.InlineKeyboardButton(text="30 –º–∏–Ω", callback_data=f"evt_personal_notif_add:{event_id}:{group_id}:30:minutes")
    )
    kb.row(types.InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ", callback_data=f"evt_personal_notif_add_free:{event_id}:{group_id}"))
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"evt_open:{event_id}:{group_id}"))
    text = "\n".join(lines)
    await bot.edit_message_text(text, chat_id=edit_chat_id, message_id=edit_message_id, reply_markup=kb.as_markup())

async def refresh_event_notifications_view_ids(edit_chat_id: int, edit_message_id: int, event_id: int, group_id: int, user_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    ev = EventRepo.get_by_id(event_id)
    if not ev:
        return
    _id, name, time_str, group_id, resp_uid = ev
    notifs = EventNotificationRepo.list_by_event(event_id)
    kb = InlineKeyboardBuilder()
    lines = [f"üîî –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è \"{name}\""]
    lines.append(f"–í—Ä–µ–º—è: {format_event_time_display(time_str)}")
    lines.append("")
    if notifs:
        lines.append("–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:")
        for notif_id, time_before, time_unit, message_text in notifs:
            time_display = format_duration_ru(time_before, time_unit)
            notification_time = calculate_notification_time(time_str, time_before, time_unit)
            lines.append(f"‚Ä¢ {time_display} - –ß–µ—Ä–µ–∑ {time_display} –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            lines.append(f"  üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è: {notification_time}")
            if can_edit_event_notifications(user_id, event_id):
                kb.row(types.InlineKeyboardButton(text=f"‚ùå {time_display}", callback_data=f"evt_notif_del:{notif_id}:{event_id}:{group_id}"))
    else:
        lines.append("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π")
    if can_edit_event_notifications(user_id, event_id):
        lines.append("")
        lines.append("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ:")
        kb.row(
            types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data=f"evt_notif_add:{event_id}:{group_id}:1:days"),
            types.InlineKeyboardButton(text="2 –¥–Ω—è", callback_data=f"evt_notif_add:{event_id}:{group_id}:2:days"),
            types.InlineKeyboardButton(text="3 –¥–Ω—è", callback_data=f"evt_notif_add:{event_id}:{group_id}:3:days")
        )
        kb.row(
            types.InlineKeyboardButton(text="1 —á–∞—Å", callback_data=f"evt_notif_add:{event_id}:{group_id}:1:hours"),
            types.InlineKeyboardButton(text="2 —á–∞—Å–∞", callback_data=f"evt_notif_add:{event_id}:{group_id}:2:hours"),
            types.InlineKeyboardButton(text="30 –º–∏–Ω", callback_data=f"evt_notif_add:{event_id}:{group_id}:30:minutes")
        )
        kb.row(types.InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ", callback_data=f"evt_notif_add_free:{event_id}:{group_id}"))
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"evt_open:{event_id}:{group_id}"))
    text = "\n".join(lines)
    await bot.edit_message_text(text, chat_id=edit_chat_id, message_id=edit_message_id, reply_markup=kb.as_markup())

# –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ä–æ–∫–æ–≤
def calculate_notification_time(event_time_str: str, time_before: int, time_unit: str) -> str:
    """Calculate when a notification will be sent based on event time and notification settings."""
    from datetime import datetime, timedelta
    
    try:
        # Parse event time
        event_dt = datetime.strptime(event_time_str, '%Y-%m-%d %H:%M:%S')
        
        # Calculate notification time (BEFORE the event)
        if time_unit == 'minutes':
            notification_dt = event_dt - timedelta(minutes=time_before)
        elif time_unit == 'hours':
            notification_dt = event_dt - timedelta(hours=time_before)
        elif time_unit == 'days':
            notification_dt = event_dt - timedelta(days=time_before)
        elif time_unit == 'weeks':
            notification_dt = event_dt - timedelta(weeks=time_before)
        elif time_unit == 'months':
            # Approximate months as 30 days
            notification_dt = event_dt - timedelta(days=time_before * 30)
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏"
        
        # Debug info
        print(f"DEBUG: Event time: {event_dt}, Notification time: {notification_dt}, Time before: {time_before} {time_unit}")
        
        # Format the result
        return notification_dt.strftime('%d.%m.%Y %H:%M')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def format_duration_ru(amount: int, unit: str) -> str:
    # –î–ª—è minutes –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ
    if unit == 'minutes':
        total = amount
        parts = []
        m_in_hour = 60
        m_in_day = 60 * 24
        m_in_week = m_in_day * 7
        m_in_month = m_in_day * 30
        months = total // m_in_month
        total %= m_in_month
        weeks = total // m_in_week
        total %= m_in_week
        days = total // m_in_day
        total %= m_in_day
        hours = total // m_in_hour
        minutes = total % m_in_hour
        if months:
            parts.append(f"{months} –º–µ—Å")
        if weeks:
            parts.append(f"{weeks} –Ω–µ–¥")
        if days:
            parts.append(f"{days} –¥–Ω")
        if hours:
            parts.append(f"{hours} —á")
        if minutes:
            parts.append(f"{minutes} –º–∏–Ω")
        return ' '.join(parts) if parts else '0 –º–∏–Ω'
    names = {
        'months': '–º–µ—Å',
        'weeks': '–Ω–µ–¥',
        'days': '–¥–Ω',
        'hours': '—á',
        'minutes': '–º–∏–Ω',
    }
    return f"{amount} {names.get(unit, unit)}"

def parse_duration_ru(text: str) -> int:
    """–ü–∞—Ä—Å–∏—Ç —Ä—É—Å—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤ –º–∏–Ω—É—Ç–∞—Ö."""
    import re
    tokens = re.split(r"[\s,]+", text.lower())
    tokens = [t for t in tokens if t]
    if not tokens:
        return 0
    units_map = {
        '–º–µ—Å—è—Ü': 'months', '–º–µ—Å—è—Ü–∞': 'months', '–º–µ—Å—è—Ü–µ–≤': 'months', '–º–µ—Å': 'months',
        '–Ω–µ–¥–µ–ª—è': 'weeks', '–Ω–µ–¥–µ–ª–∏': 'weeks', '–Ω–µ–¥–µ–ª—å': 'weeks', '–Ω–µ–¥': 'weeks', '–Ω–µ–¥–µ–ª—è–º–∏': 'weeks',
        '–¥–µ–Ω—å': 'days', '–¥–Ω—è': 'days', '–¥–Ω–µ–π': 'days', '–¥–Ω': 'days', '–¥–Ω—è–º–∏': 'days',
        '—á–∞—Å': 'hours', '—á–∞—Å–∞': 'hours', '—á–∞—Å–æ–≤': 'hours', '—á': 'hours', '—á–∞—Å–∞–º–∏': 'hours',
        '–º–∏–Ω—É—Ç–∞': 'minutes', '–º–∏–Ω—É—Ç—ã': 'minutes', '–º–∏–Ω—É—Ç': 'minutes', '–º–∏–Ω': 'minutes', '–º–∏–Ω—É—Ç–∞–º–∏': 'minutes',
    }
    m_in = {
        'months': 30 * 24 * 60,
        'weeks': 7 * 24 * 60,
        'days': 24 * 60,
        'hours': 60,
        'minutes': 1,
    }
    total = 0
    i = 0
    while i < len(tokens):
        try:
            num = int(tokens[i])
            i += 1
            if i < len(tokens):
                unit_token = tokens[i]
                unit = units_map.get(unit_token)
                if unit:
                    total += num * m_in[unit]
                    i += 1
                else:
                    # –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –µ–¥–∏–Ω–∏—Ü—É, —Å—á–∏—Ç–∞–µ–º –º–∏–Ω—É—Ç–∞–º–∏
                    total += num
            else:
                total += num
        except ValueError:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
            i += 1
    return total


def parse_ru_datetime(text: str) -> datetime | None:
    """–ü–∞—Ä—Å–∏—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –≤ datetime (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)."""
    dt = dateparser.parse(
        text,
        languages=["ru"],
        settings={
            'PREFER_DATES_FROM': 'future',
            'DATE_ORDER': 'DMY',
            'TIMEZONE': 'UTC',
            'RETURN_AS_TIMEZONE_AWARE': False,
        },
    )
    return dt

def format_event_time_display(time_str: str) -> str:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∫ –≤–∏–¥—É –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–° –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ISO "YYYY-MM-DD HH:MM:SS" –∏–ª–∏ –¥—Ä—É–≥–∏–µ
    try_formats = ["%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M:%S", "%d.%m.%Y %H:%M"]
    for fmt in try_formats:
        try:
            dt = datetime.strptime(time_str, fmt)
            return dt.strftime("%d.%m.%Y %H:%M:%S")
        except Exception:
            pass
    # –ö–∞–∫ fallback –ø–æ–ø—Ä–æ–±—É–µ–º dateparser
    dt2 = dateparser.parse(time_str, languages=["ru"], settings={'DATE_ORDER': 'DMY'})
    if dt2:
        return dt2.strftime("%d.%m.%Y %H:%M:%S")
    return time_str

def can_edit_event_notifications(user_id: int, event_id: int) -> bool:
    """Owner/admin/superadmin only (responsible no longer allowed)."""
    if user_id == SUPERADMIN_ID:
        return True
    ev = EventRepo.get_by_id(event_id)
    if not ev:
        return False
    _id, _name, _time_str, group_id, _resp_uid = ev
    role = RoleRepo.get_user_role(user_id, group_id)
    return role in ['owner', 'admin']


@dp.my_chat_member()
async def on_chat_member_update(event: ChatMemberUpdated):
    logging.info(f"my_chat_member update received: chat={event.chat.id}, status={event.new_chat_member.status}, actor={getattr(event.from_user,'id',None)}")
    # Only react when the bot is added to a group
    if event.new_chat_member.user.id != bot.id:
        return

    if event.new_chat_member.status in (ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR):
        logging.info("Bot added to a chat (member/admin), proceeding with registration...")
        chat_id = str(event.chat.id)
        title = event.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        adder = event.from_user

        # Upsert the user who added the bot (if known)
        owner_user_id = None
        if adder is not None:
            owner_user_id = UserRepo.upsert_user(
                telegram_id=adder.id,
                username=adder.username,
                phone=None,
                first_name=adder.first_name,
                last_name=adder.last_name,
            )

        # Ensure group exists
        existing = GroupRepo.get_by_chat_id(chat_id)
        if not existing:
            group_id = GroupRepo.create(chat_id, title, owner_user_id)
            # If we know adder, grant owner role
            if owner_user_id is not None:
                RoleRepo.add_role(owner_user_id, group_id, 'owner', confirmed=True)
            # Add superadmin to the group as superadmin
            try:
                sa_row = UserRepo.get_by_telegram_id(SUPERADMIN_ID)
                if sa_row:
                    RoleRepo.add_role(sa_row[0], group_id, 'superadmin', confirmed=True)
            except Exception:
                pass
            # Default notifications
            NotificationRepo.ensure_defaults(group_id)
            await bot.send_message(event.chat.id, "–ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã.")
        else:
            logging.info("Group already registered, skipping")


@dp.message(CommandStart())
async def start(message: types.Message):
    user = message.from_user
    user_id = UserRepo.upsert_user(
        telegram_id=user.id,
        username=user.username,
        phone=None,
        first_name=user.first_name,
        last_name=user.last_name,
    )

    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–µ –º–µ–Ω—é (–µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    groups = GroupRepo.list_user_groups_with_roles(user_id)
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    lines = []
    if user.id == SUPERADMIN_ID:
        lines.append(f"–†–æ–ª—å: {ROLE_RU['superadmin']}")
    if not groups:
        lines.append("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
    else:
        lines.append("–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:")
        for gid, title, role, chat_id in groups:
            role_ru = ROLE_RU.get(role, role)
            kb.button(text=f"{title} (—Ä–æ–ª—å: {role_ru})", callback_data=f"grp_menu:{gid}")
        kb.adjust(1)
    await set_menu_message(user_id, message.chat.id, "\n".join(lines), kb.as_markup())

    # Check if user matches any pending admins and confirm in those groups
    try:
        group_ids = RoleRepo.find_groups_for_pending(telegram_id=user.id, username=user.username, phone=None)
        for gid in group_ids:
            RoleRepo.confirm_admin_if_pending(user_id, gid)
        if group_ids:
            await message.answer(f"–í–∞—à –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–∞—Ö: {', '.join(map(str, group_ids))}")
        else:
            # If nothing confirmed via id/username, suggest sharing phone number only if there are pending by phone
            if RoleRepo.has_any_pending_by_phone():
                kb = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True)]],
                    resize_keyboard=True,
                    one_time_keyboard=True,
                    selective=True,
                )
                await message.answer(
                    "–ï—Å–ª–∏ –≤–∞—Å –¥–æ–±–∞–≤–ª—è–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                    reply_markup=kb,
                )
    except Exception as e:
        logging.exception(f"Failed to confirm pending admin: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data and c.data.startswith('grp_events:'))
async def cb_group_events(callback: types.CallbackQuery):
    print(f"DEBUG: cb_group_events called with data: {callback.data}")
    gid = int(callback.data.split(':', 1)[1])
    await safe_answer(callback)
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    # Resolve current internal user
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    internal_user_id = urow[0] if urow else None
    events = EventRepo.list_by_group(gid)
    kb = InlineKeyboardBuilder()
    lines = [f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (ID –≥—Ä—É–ø–ø—ã {gid})"]
    if events:
        for eid, name, time_str, resp_uid in events:
            who: str
            time_disp = format_event_time_display(time_str)
            if resp_uid:
                u = UserRepo.get_by_id(resp_uid)
                if u:
                    _iid, _tid, _uname, _phone, _first, _last = u
                    if _uname:
                        who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{_uname}"
                    elif _first or _last:
                        who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {(_first or '').strip()} {(_last or '').strip()}".strip()
                    else:
                        who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {_tid}"
                else:
                    who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_uid}"
            else:
                who = "–±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
            lines.append(f"‚Ä¢ {name}\n{time_disp} | {who}")
            # Only an Open button in the list; booking is managed inside the event card
            kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å: {name}", callback_data=f"evt_open:{eid}:{gid}")
        kb.adjust(1)
    else:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ) –∏ –Ω–∞–∑–∞–¥
    # Hide "+ –°–æ–∑–¥–∞—Ç—å" for plain members
    role = RoleRepo.get_user_role(internal_user_id, gid) if internal_user_id is not None else None
    if role in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID:
        kb.row(types.InlineKeyboardButton(text="+ –°–æ–∑–¥–∞—Ç—å", callback_data=f"evt_create:{gid}"))
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_menu:{gid}"))
    await set_menu_message(callback.from_user.id, callback.message.chat.id, "\n".join(lines), kb.as_markup())

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_open:'))
async def cb_event_open(callback: types.CallbackQuery):
    print(f"DEBUG: cb_event_open called with data: {callback.data}")
    try:
        _, eid, gid = callback.data.split(':')
        eid_i = int(eid)
        gid_i = int(gid)
        print(f"DEBUG: Parsed eid_i={eid_i}, gid_i={gid_i}")
        await callback.answer()
        print(f"DEBUG: After callback.answer()")
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        print(f"DEBUG: Before EventRepo.get_by_id")
        ev = EventRepo.get_by_id(eid_i)
        print(f"DEBUG: Event data: {ev}")
        if not ev:
            print(f"DEBUG: Event not found")
            await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        _id, name, time_str, group_id, resp_uid = ev
        # Resolve current user internal id
        urow = UserRepo.get_by_telegram_id(callback.from_user.id)
        internal_user_id = urow[0] if urow else None
        kb = InlineKeyboardBuilder()
        
        # Role-based controls
        role = RoleRepo.get_user_role(internal_user_id, gid_i) if internal_user_id is not None else None
        if role in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID:
            kb.row(
                types.InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"evt_rename:{eid_i}:{gid_i}"),
                types.InlineKeyboardButton(text="üïí –ò–∑–º. –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"evt_retime:{eid_i}:{gid_i}")
            )
            kb.row(
                types.InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_assign:{eid_i}:{gid_i}"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"evt_delete:{eid_i}:{gid_i}")
            )
        # Owner or Superadmin can send an immediate notify to the group and DM responsible
        if (role == "owner") or (callback.from_user.id == SUPERADMIN_ID):
            kb.row(types.InlineKeyboardButton(text="üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", callback_data=f"evt_notify_now:{eid_i}:{gid_i}"))
        # Booking/unbooking in event card for participants
        if not resp_uid:
            kb.row(types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"evt_book_toggle:{eid_i}:{gid_i}"))
        else:
            # Allow unassign button for owners/admins/superadmin or the responsible themselves
            if internal_user_id is not None and (internal_user_id == resp_uid or role in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID):
                kb.row(types.InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_unassign:{eid_i}:{gid_i}"))
        
        # Group notifications only for owner/admin/superadmin
        if internal_user_id and can_edit_event_notifications(internal_user_id, eid_i):
            kb.row(types.InlineKeyboardButton(text="üîî –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_notifications:{eid_i}:{gid_i}"))
        # Personal notifications for responsible OR owner/admin/superadmin
        if internal_user_id and (
            (resp_uid and internal_user_id == resp_uid)
            or (role in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID)
        ):
            kb.row(types.InlineKeyboardButton(text="üì± –õ–∏—á–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_personal_notifications:{eid_i}:{gid_i}"))

        kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_events:{gid_i}"))
        
        # Prepare display text for responsible person
        if resp_uid:
            u = UserRepo.get_by_id(resp_uid)
            if u:
                _iid, _tid, _uname, _phone, _first, _last = u
                if _uname:
                    resp_text = f"@{_uname}"
                elif _first or _last:
                    resp_text = f"{(_first or '').strip()} {(_last or '').strip()}".strip()
                else:
                    resp_text = str(_tid)
            else:
                resp_text = str(resp_uid)
        else: 
            resp_text = '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
        text = f"{name}\n–í—Ä–µ–º—è: {format_event_time_display(time_str)}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_text}"
        await set_menu_message(callback.from_user.id, callback.message.chat.id, text, kb.as_markup())
    except Exception as e:
        print(f"DEBUG: Error in cb_event_open: {e}")
        import traceback
        traceback.print_exc()

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_delete:'))
async def cb_event_delete(callback: types.CallbackQuery):
    try:
        _, eid, gid = callback.data.split(':')
        print(f"DELETE EVENT: eid={eid}, gid={gid}")
        result = EventRepo.delete(int(eid))
        print(f"DELETE RESULT: {result}")
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        print(f"DELETE ERROR: {e}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
    # refresh list
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    gid_i = int(gid)
    events = EventRepo.list_by_group(gid_i)
    kb = InlineKeyboardBuilder()
    lines = [f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (ID –≥—Ä—É–ø–ø—ã {gid_i})"]
    if events:
        for eid, name, time_str, resp_uid in events:
            if resp_uid:
                u = UserRepo.get_by_id(resp_uid)
                if u:
                    _iid, _tid, _uname, _phone, _first, _last = u
                    if _uname:
                        who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{_uname}"
                    elif _first or _last:
                        who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {(_first or '').strip()} {(_last or '').strip()}".strip()
                    else:
                        who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {_tid}"
                else:
                    who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_uid}"
            else:
                who = "–±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
            lines.append(f"‚Ä¢ {name}\n{time_str} | {who}")
            kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å: {name}", callback_data=f"evt_open:{eid}:{gid_i}")
        kb.adjust(1)
    else:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    kb.row(types.InlineKeyboardButton(text="+ –°–æ–∑–¥–∞—Ç—å", callback_data=f"evt_create:{gid_i}"))
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_menu:{gid_i}"))
    await set_menu_message(callback.from_user.id, callback.message.chat.id, "\n".join(lines), kb.as_markup())

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_assign:'))
async def cb_event_assign(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    await safe_answer(callback)
    prompt = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID Telegram –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    AWAITING_EVENT_CREATE[callback.from_user.id] = {
        'mode': 'assign', 'eid': eid_i, 'gid': gid_i,
        'edit_chat_id': callback.message.chat.id,
        'edit_message_id': callback.message.message_id,
        'prompt_message_id': prompt.message_id,
    }

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_unassign:'))
async def cb_event_unassign(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    EventRepo.set_responsible(eid_i, None)
    await callback.answer("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–Ω—è—Ç")
    # refresh card directly
    ev = EventRepo.get_by_id(eid_i)
    if ev:
        _id, name, time_str, group_id, resp_uid = ev
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        kb = InlineKeyboardBuilder()
        # Current user role
        urow = UserRepo.get_by_telegram_id(callback.from_user.id)
        internal_user_id = urow[0] if urow else None
        role = RoleRepo.get_user_role(internal_user_id, gid_i) if internal_user_id is not None else None
        # Admin controls
        if role in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID:
            kb.row(
                types.InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"evt_rename:{eid_i}:{gid_i}"),
                types.InlineKeyboardButton(text="üïí –ò–∑–º. –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"evt_retime:{eid_i}:{gid_i}")
            )
            kb.row(
                types.InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_assign:{eid_i}:{gid_i}"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"evt_delete:{eid_i}:{gid_i}")
            )
        # Booking controls
        if not resp_uid:
            kb.row(types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"evt_book_toggle:{eid_i}:{gid_i}"))
        else:
            if internal_user_id is not None and (internal_user_id == resp_uid or role in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID):
                kb.row(types.InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_unassign:{eid_i}:{gid_i}"))
        # Group notifications for admins
        if internal_user_id and can_edit_event_notifications(internal_user_id, eid_i):
            kb.row(types.InlineKeyboardButton(text="üîî –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_notifications:{eid_i}:{gid_i}"))
        # Personal notifications for responsible OR owner/admin/superadmin
        if internal_user_id and (
            (resp_uid and internal_user_id == resp_uid)
            or (role in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID)
        ):
            kb.row(types.InlineKeyboardButton(text="üì± –õ–∏—á–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_personal_notifications:{eid_i}:{gid_i}"))
        kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_events:{gid_i}"))
        
        # Prepare display text for responsible person
        if resp_uid:
            u = UserRepo.get_by_id(resp_uid)
            if u:
                _iid, _tid, _uname, _phone, _first, _last = u
                if _uname:
                    resp_text = f"@{_uname}"
                elif _first or _last:
                    resp_text = f"{(_first or '').strip()} {(_last or '').strip()}".strip()
                else:
                    resp_text = str(_tid)
            else:
                resp_text = str(resp_uid)
        else:
            resp_text = '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
        text = f"{name}\n–í—Ä–µ–º—è: {format_event_time_display(time_str)}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_text}"
        await set_menu_message(callback.from_user.id, callback.message.chat.id, text, kb.as_markup())

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_rename:'))
async def cb_event_rename_prompt(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    await safe_answer(callback)
    prompt = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    AWAITING_EVENT_EDIT[callback.from_user.id] = {
        'eid': int(eid), 'gid': int(gid), 'mode': 'rename',
        'edit_chat_id': callback.message.chat.id, 'edit_message_id': callback.message.message_id,
        'prompt_message_id': prompt.message_id,
    }

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_retime:'))
async def cb_event_retime_prompt(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    await safe_answer(callback)
    prompt = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è (–Ω–∞–ø—Ä. '22 —Å–µ–Ω—Ç—è–±—Ä—è 8 —É—Ç—Ä–∞', '15.09.2025 00:00', '15.09.2025 00:00:00')"
    )
    AWAITING_EVENT_EDIT[callback.from_user.id] = {
        'eid': int(eid), 'gid': int(gid), 'mode': 'retime',
        'edit_chat_id': callback.message.chat.id, 'edit_message_id': callback.message.message_id,
        'prompt_message_id': prompt.message_id,
    }

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_notifications:'))
async def cb_event_notifications(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    await safe_answer(callback)
    
    # Check permissions
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    internal_user_id = urow[0] if urow else None
    if not internal_user_id or not can_edit_event_notifications(internal_user_id, eid_i):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        return
    
    # Use the new refresh function
    await refresh_event_notifications_view(callback.message, eid_i, gid_i, internal_user_id)

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_personal_notifications:'))
async def cb_event_personal_notifications(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    await safe_answer(callback)
    
    # Get user
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    if not urow:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    internal_user_id = urow[0]
    
    # Personal notifications are now handled automatically by set_responsible
    # No need to seed them manually here
    # Use the new refresh function
    await refresh_personal_notifications_view(callback.message, eid_i, gid_i, internal_user_id)

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_notif_add:'))
async def cb_event_notif_add(callback: types.CallbackQuery):
    _, eid, gid, amount, unit = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    amount_i = int(amount)
    await safe_answer(callback)
    
    # Check permissions
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    internal_user_id = urow[0] if urow else None
    if not internal_user_id or not can_edit_event_notifications(internal_user_id, eid_i):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        return
    
    # Add notification with standard text
    EventNotificationRepo.add_notification(eid_i, amount_i, unit, f"–ß–µ—Ä–µ–∑ {format_duration_ru(amount_i, unit)} –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ")
    # Refresh view by updating the message directly
    await refresh_event_notifications_view(callback.message, eid_i, gid_i, internal_user_id)

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_notif_del:'))
async def cb_event_notif_del(callback: types.CallbackQuery):
    _, notif_id, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    await safe_answer(callback)
    
    # Check permissions
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    internal_user_id = urow[0] if urow else None
    if not internal_user_id or not can_edit_event_notifications(internal_user_id, eid_i):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        return
    
    # Delete notification
    EventNotificationRepo.delete_notification(int(notif_id))
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    # Refresh view by updating the message directly
    await refresh_event_notifications_view(callback.message, eid_i, gid_i, internal_user_id)

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_notif_add_free:'))
async def cb_event_notif_add_free(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    await safe_answer(callback)
    
    # Check permissions
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    internal_user_id = urow[0] if urow else None
    if not internal_user_id or not can_edit_event_notifications(internal_user_id, eid_i):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        return
    
    prompt = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1 –Ω–µ–¥–µ–ª—è', '2 –¥–Ω—è', '1 –¥–µ–Ω—å –∏ 3 —á–∞—Å–∞', '40 –º–∏–Ω—É—Ç', '1 —á–∞—Å 6 –º–∏–Ω—É—Ç')\n"
        "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: '18.09.2025 22:30', '2025-09-18 22:30'"
    )
    AWAITING_EVENT_NOTIF[callback.from_user.id] = {
        'eid': eid_i,
        'gid': gid_i,
        'edit_chat_id': callback.message.chat.id,
        'edit_message_id': callback.message.message_id,
        'prompt_message_id': prompt.message_id,
    }

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_personal_notif_add:'))
async def cb_personal_notif_add(callback: types.CallbackQuery):
    _, eid, gid, amount, unit = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    amount_i = int(amount)
    await safe_answer(callback)
    
    # Get user
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    if not urow:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    internal_user_id = urow[0]
    
    # Add personal notification with standard text
    PersonalEventNotificationRepo.add_notification(internal_user_id, eid_i, amount_i, unit, f"–ß–µ—Ä–µ–∑ {format_duration_ru(amount_i, unit)} –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ")
    # Refresh view by updating the message directly
    await refresh_personal_notifications_view(callback.message, eid_i, gid_i, internal_user_id)

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_personal_notif_del:'))
async def cb_personal_notif_del(callback: types.CallbackQuery):
    _, notif_id, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    await safe_answer(callback)
    
    # Get user
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    if not urow:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    internal_user_id = urow[0]
    
    # Delete personal notification
    PersonalEventNotificationRepo.delete_notification(int(notif_id), internal_user_id)
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    # Refresh view by updating the message directly
    await refresh_personal_notifications_view(callback.message, eid_i, gid_i, internal_user_id)

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_personal_notif_add_free:'))
async def cb_personal_notif_add_free(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    await safe_answer(callback)
    
    # Get user
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    if not urow:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    prompt = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1 –Ω–µ–¥–µ–ª—è', '2 –¥–Ω—è', '1 –¥–µ–Ω—å –∏ 3 —á–∞—Å–∞', '40 –º–∏–Ω—É—Ç', '1 —á–∞—Å 6 –º–∏–Ω—É—Ç')\n"
        "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: '18.09.2025 22:30', '2025-09-18 22:30'"
    )
    AWAITING_PERSONAL_NOTIF[callback.from_user.id] = {
        'eid': eid_i,
        'gid': gid_i,
        'edit_chat_id': callback.message.chat.id,
        'edit_message_id': callback.message.message_id,
        'prompt_message_id': prompt.message_id,
    }

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_create:'))
async def cb_event_create(callback: types.CallbackQuery):
    _, gid = callback.data.split(':')
    gid_i = int(gid)
    await callback.answer()
    prompt = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    AWAITING_EVENT_CREATE[callback.from_user.id] = {
        'mode': 'create', 'gid': gid_i, 'step': 'name',
        'edit_chat_id': callback.message.chat.id,
        'edit_message_id': callback.message.message_id,
        'prompt_message_id': prompt.message_id,
    }

def build_notifies_ui(gid: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    group = GroupRepo.get_by_id(gid)
    group_title = group[2] if group else f"–ì—Ä—É–ø–ø–∞ {gid}"
    header = f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è: {group_title} (ID {gid})"
    notifies = NotificationRepo.list_notifications(gid)
    kb = InlineKeyboardBuilder()
    if notifies:
        for nid, time_before, time_unit, message_text, is_default in notifies:
            pretty = format_duration_ru(time_before if time_unit=='minutes' else time_before, time_unit)
            kb.row(
                types.InlineKeyboardButton(text=pretty, callback_data="noop"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"notif_del:{nid}:{gid}")
            )
    else:
        kb.row(types.InlineKeyboardButton(text="–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="noop"))
    kb.row(
        types.InlineKeyboardButton(text="+ 3 –¥–Ω—è", callback_data=f"notif_add:{gid}:3:days"),
        types.InlineKeyboardButton(text="+ 1 –¥–µ–Ω—å", callback_data=f"notif_add:{gid}:1:days"),
        types.InlineKeyboardButton(text="+ 2 —á–∞—Å–∞", callback_data=f"notif_add:{gid}:2:hours")
    )
    kb.row(types.InlineKeyboardButton(text="+ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é‚Ä¶", callback_data=f"notif_add_free:{gid}"))
    # –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_menu:{gid}"))
    return header, kb.as_markup()


def build_admins_ui(gid: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    admins = GroupRepo.list_group_admins(gid)
    pending = RoleRepo.list_pending_admins(gid)
    lines = [f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã {gid}"]
    if admins:
        lines.append("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ:")
        for uid, tid, uname in admins:
            uname_disp = f"@{uname}" if uname else str(tid)
            kb.row(
                types.InlineKeyboardButton(text=uname_disp, callback_data="noop"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"adm_del:{uid}:{gid}")
            )
    else:
        kb.row(types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤", callback_data="noop"))
    if pending:
        lines.append("")
        lines.append("–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        for pid, ident, ident_type, created_by, created_at in pending:
            kb.row(
                types.InlineKeyboardButton(text=f"{ident_type}: {ident}", callback_data="noop"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"padm_del:{pid}:{gid}")
            )
    # Add controls
    kb.row(types.InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ ID", callback_data=f"adm_add_id:{gid}"))
    kb.row(types.InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ @username", callback_data=f"adm_add_username:{gid}"))
    kb.row(types.InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data=f"adm_add_phone:{gid}"))
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_menu:{gid}"))
    return "\n".join(lines), kb.as_markup()

@dp.callback_query(lambda c: c.data and c.data.startswith('grp_notifies:'))
async def cb_group_notifies(callback: types.CallbackQuery):
    gid = int(callback.data.split(':', 1)[1])
    await callback.answer()
    header, markup = build_notifies_ui(gid)
    await set_menu_message(callback.from_user.id, callback.message.chat.id, header, markup)


@dp.callback_query(lambda c: c.data and c.data.startswith('grp_remind:'))
async def cb_group_remind(callback: types.CallbackQuery):
    gid = int(callback.data.split(':', 1)[1])
    await callback.answer()
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è", callback_data=f"grp_remind_period:{gid}:7days"),
        types.InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data=f"grp_remind_period:{gid}:1month"),
    )
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_menu:{gid}"))
    await set_menu_message(callback.from_user.id, callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", kb.as_markup())

@dp.callback_query(lambda c: c.data and c.data.startswith('grp_remind_period:'))
async def cb_group_remind_period(callback: types.CallbackQuery):
    _, gid, period = callback.data.split(':')
    gid_i = int(gid)
    await callback.answer()
    # Permissions: owner/admin/superadmin only
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    internal_user_id = urow[0] if urow else None
    role = RoleRepo.get_user_role(internal_user_id, gid_i) if internal_user_id is not None else None
    if not (callback.from_user.id == SUPERADMIN_ID or role in ("owner", "admin")):
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    # Compute range
    now = datetime.utcnow()
    if period == '7days':
        end = now + timedelta(days=7)
    else:
        end = now + timedelta(days=30)
    start_iso = now.strftime('%Y-%m-%d %H:%M:%S')
    end_iso = end.strftime('%Y-%m-%d %H:%M:%S')
    events = EventRepo.list_by_group_between(gid_i, start_iso, end_iso)
    # Resolve target chat: send to the group's chat, not to the user's PM
    grp = GroupRepo.get_by_id(gid_i)
    if not grp:
        await callback.message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    try:
        target_chat_id = int(grp[1])  # telegram_chat_id
    except Exception:
        target_chat_id = grp[1]
    if not events:
        await callback.message.answer("–í –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç")
        return
    # Send messages with booking button
    for eid, name, time_str, resp_uid in events:
        # Resolve responsible display
        if resp_uid:
            u = UserRepo.get_by_id(resp_uid)
            if u:
                _iid, _tid, _uname, _phone, _first, _last = u
                if _uname:
                    who = f"@{_uname}"
                elif _first or _last:
                    who = f"{(_first or '').strip()} {(_last or '').strip()}".strip()
                else:
                    who = str(_tid)
            else:
                who = str(resp_uid)
        else:
            who = None
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        kb = InlineKeyboardBuilder()
        label = who if who else "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
        kb.row(types.InlineKeyboardButton(text=label, callback_data=f"evt_book_toggle:{eid}:{gid_i}"))
        text = f"‚Ä¢ {name}\n{format_event_time_display(time_str)}"
        await bot.send_message(target_chat_id, text, reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data and c.data.startswith('role_book:'))
async def cb_role_book(callback: types.CallbackQuery):
    try:
        _, eid, gid, role_name = callback.data.split(':', 3)
        eid_i = int(eid); gid_i = int(gid)
        await callback.answer()
    except Exception as e:
        return await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
    # Ensure user exists in our DB
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    if not urow:
        UserRepo.upsert_user(callback.from_user.id, callback.from_user.username, None, callback.from_user.first_name, callback.from_user.last_name)
        urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    user_id = urow[0]
    # Add member role if missing for visibility
    try:
        if not RoleRepo.get_user_role(user_id, gid_i):
            RoleRepo.add_role(user_id, gid_i, 'member', True)
    except Exception:
        pass
    # Assign role via web repo logic
    from services.repositories import EventRoleAssignmentRepo
    # Check multi-role flag and existing assignments for this user
    try:
        ev = EventRepo.get_by_id(eid_i)
        allow_multi = ev[5] if ev and len(ev) > 5 else 0
        if not allow_multi:
            existing = [uid for _r, uid in EventRoleAssignmentRepo.list_for_event(eid_i) if uid == user_id]
            if existing:
                return await callback.answer("–î–æ–ø—É—Å—Ç–∏–º–∞ —Ç–æ–ª—å–∫–æ 1 –±—Ä–æ–Ω—å –≤ —ç—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", show_alert=True)
    except Exception:
        pass
    if EventRoleAssignmentRepo.assign(eid_i, role_name, user_id):
        await refresh_role_keyboard(callback.message, gid_i, eid_i)
    else:
        await callback.answer("–£–∂–µ –∑–∞–Ω—è—Ç–æ", show_alert=False)

@dp.callback_query(lambda c: c.data and c.data.startswith('role_unbook:'))
async def cb_role_unbook(callback: types.CallbackQuery):
    try:
        _, eid, gid, role_name = callback.data.split(':', 3)
        eid_i = int(eid); gid_i = int(gid)
        await callback.answer()
    except Exception as e:
        return await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    user_id = urow[0] if urow else None
    if not user_id:
        return await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=False)
    from services.repositories import EventRoleAssignmentRepo, RoleRepo
    # Admins/owners can unassign any user; find current assignee for this role
    try:
        role = RoleRepo.get_user_role(user_id, gid_i)
        is_admin = role in ['admin', 'owner', 'superadmin'] if role else False
    except Exception:
        is_admin = False
    target_uid = user_id
    if is_admin:
        try:
            for r, uid in EventRoleAssignmentRepo.list_for_event(eid_i):
                if r == role_name:
                    target_uid = uid
                    break
        except Exception:
            pass
    if EventRoleAssignmentRepo.unassign(eid_i, role_name, target_uid):
        await refresh_role_keyboard(callback.message, gid_i, eid_i)
    else:
        await callback.answer("–ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —á—É–∂—É—é –±—Ä–æ–Ω—å", show_alert=False)

async def refresh_role_keyboard(message: types.Message, gid: int, eid: int):
    # Rebuild keyboard for roles
    from services.repositories import EventRoleRequirementRepo, EventRoleAssignmentRepo, DisplayNameRepo
    reqs = EventRoleRequirementRepo.list_for_event(eid)
    asgs = EventRoleAssignmentRepo.list_for_event(eid)
    asg_map = {}
    for r, uid in asgs:
        asg_map.setdefault(r, []).append(uid)
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    for rname, _req in sorted(reqs, key=lambda x: x[0].lower()):
        assigned = asg_map.get(rname, [])
        if assigned:
            uid = assigned[0]
            dn = DisplayNameRepo.get_display_name(gid, uid)
            label = dn if dn else f"ID:{uid}"
            kb.row(types.InlineKeyboardButton(text=f"‚úÖ {rname}: {label}", callback_data=f"role_unbook:{eid}:{gid}:{rname}"))
        else:
            kb.row(types.InlineKeyboardButton(text=f"üü¢ {rname}: –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"role_book:{eid}:{gid}:{rname}"))
    try:
        await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id, reply_markup=kb.as_markup())
    except Exception:
        pass

@dp.callback_query(lambda c: c.data and c.data.startswith('evt_notify_now:'))
async def cb_evt_notify_now(callback: types.CallbackQuery):
    _, eid, gid = callback.data.split(':')
    eid_i = int(eid)
    gid_i = int(gid)
    await callback.answer()
    # Permissions: owner or superadmin
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    internal_user_id = urow[0] if urow else None
    role = RoleRepo.get_user_role(internal_user_id, gid_i) if internal_user_id is not None else None
    if not (callback.from_user.id == SUPERADMIN_ID or role == "owner"):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=False)
        return
    ev = EventRepo.get_by_id(eid_i)
    if not ev:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
        return
    _id, name, time_str, group_id, resp_uid = ev
    grp = GroupRepo.get_by_id(group_id)
    if not grp:
        await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=False)
        return
    chat_id = grp[1]
    # Resolve responsible label
    label = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
    if resp_uid:
        u = UserRepo.get_by_id(resp_uid)
        if u:
            _iid, _tid, _uname, _phone, _first, _last = u
            if _uname:
                label = f"@{_uname}"
            elif _first or _last:
                label = f"{(_first or '').strip()} {(_last or '').strip()}".strip()
            else:
                label = str(_tid)
        else:
            label = str(resp_uid)
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text=label, callback_data=f"evt_book_toggle:{eid_i}:{gid_i}"))
    # Build text per spec with responsible line
    lines = [
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é \"{name}\".",
        f"{format_event_time_display(time_str)}",
    ]
    if resp_uid:
        lines.append(f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π - {label}")
    else:
        lines.append("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
    text = "\n".join(lines)
    # Send to group chat
    try:
        await bot.send_message(int(chat_id), text, reply_markup=kb.as_markup())
    except Exception:
        try:
            await bot.send_message(chat_id, text, reply_markup=kb.as_markup())
        except Exception:
            pass
    # DM to responsible
    if resp_uid:
        u = UserRepo.get_by_id(resp_uid)
        if u:
            _iid, _tid, _uname, _phone, _first, _last = u
            try:
                await bot.send_message(_tid, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {name} ‚Äî {format_event_time_display(time_str)}. –í—ã —É–∫–∞–∑–∞–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º.")
            except Exception:
                pass
    await callback.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    # If this action happened in the private event card, refresh the card to show "‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
    try:
        if getattr(callback.message.chat, 'type', None) == 'private':
            # rebuild event card similar to cb_event_open
            ev_full = EventRepo.get_by_id(eid_i)
            if ev_full:
                _id3, name3, time_str3, group_id3, resp_uid3 = ev_full
                # Resolve current user internal id
                urow2 = UserRepo.get_by_telegram_id(callback.from_user.id)
                internal_user_id2 = urow2[0] if urow2 else None
                kb2 = InlineKeyboardBuilder()
                role2 = RoleRepo.get_user_role(internal_user_id2, gid_i) if internal_user_id2 is not None else None
                if role2 in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID:
                    kb2.row(
                        types.InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"evt_rename:{eid_i}:{gid_i}"),
                        types.InlineKeyboardButton(text="üïí –ò–∑–º. –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"evt_retime:{eid_i}:{gid_i}")
                    )
                    kb2.row(
                        types.InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_assign:{eid_i}:{gid_i}"),
                        types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"evt_delete:{eid_i}:{gid_i}")
                    )
                if not resp_uid3:
                    kb2.row(types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"evt_book_toggle:{eid_i}:{gid_i}"))
                else:
                    if internal_user_id2 is not None and (internal_user_id2 == resp_uid3 or role2 in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID):
                        kb2.row(types.InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_unassign:{eid_i}:{gid_i}"))
                if internal_user_id2 and can_edit_event_notifications(internal_user_id2, eid_i):
                    kb2.row(types.InlineKeyboardButton(text="üîî –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_notifications:{eid_i}:{gid_i}"))
                # Personal notifications for responsible OR owner/admin/superadmin
                if internal_user_id2 and (
                    (resp_uid3 and internal_user_id2 == resp_uid3)
                    or (role2 in ("owner", "admin") or callback.from_user.id == SUPERADMIN_ID)
                ):
                    kb2.row(types.InlineKeyboardButton(text="üì± –õ–∏—á–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_personal_notifications:{eid_i}:{gid_i}"))
                kb2.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_events:{gid_i}"))
                # Prepare display text
                if resp_uid3:
                    u3 = UserRepo.get_by_id(resp_uid3)
                    if u3:
                        _iid3, _tid3, _uname3, _phone3, _first3, _last3 = u3
                        if _uname3:
                            resp_text3 = f"@{_uname3}"
                        elif _first3 or _last3:
                            resp_text3 = f"{(_first3 or '').strip()} {(_last3 or '').strip()}".strip()
                        else:
                            resp_text3 = str(_tid3)
                    else:
                        resp_text3 = str(resp_uid3)
                else:
                    resp_text3 = '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                text3 = f"{name3}\n–í—Ä–µ–º—è: {format_event_time_display(time_str3)}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_text3}"
                await set_menu_message(callback.from_user.id, callback.message.chat.id, text3, kb2.as_markup())
    except Exception:
        pass

@dp.callback_query(lambda c: c.data and c.data.startswith('grp_menu:'))
async def cb_group_menu(callback: types.CallbackQuery):
    gid = int(callback.data.split(':', 1)[1])
    await callback.answer()
    # callback.from_user.id ‚Äî —ç—Ç–æ Telegram ID, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π user_id
    urow = UserRepo.get_by_telegram_id(callback.from_user.id)
    internal_user_id = urow[0] if urow else None
    role = RoleRepo.get_user_role(internal_user_id, gid) if internal_user_id is not None else None
    group = GroupRepo.get_by_id(gid)
    title = group[2] if group else f"–ì—Ä—É–ø–ø–∞ {gid}"
    role_ru = ROLE_RU.get(role or 'member', role or 'member')

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    kb.button(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=f"grp_events:{gid}")
    if role == "owner":
        kb.button(text="–û–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"grp_notifies:{gid}")
        kb.button(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data=f"grp_admins:{gid}")
        kb.button(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data=f"grp_remind:{gid}")
    kb.adjust(2)
    await set_menu_message(callback.from_user.id, callback.message.chat.id, f"{title} (ID {gid})\n–†–æ–ª—å - {role_ru}", kb.as_markup())

@dp.callback_query(lambda c: c.data and c.data.startswith('grp_admins:'))
async def cb_group_admins(callback: types.CallbackQuery):
    gid = int(callback.data.split(':', 1)[1])
    await callback.answer()
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    admins = GroupRepo.list_group_admins(gid)
    pending = RoleRepo.list_pending_admins(gid)
    lines = [f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã {gid}"]
    if admins:
        lines.append("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ:")
        for uid, tid, uname in admins:
            uname_disp = f"@{uname}" if uname else str(tid)
            kb.row(
                types.InlineKeyboardButton(text=uname_disp, callback_data="noop"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"adm_del:{uid}:{gid}")
            )
    else:
        kb.row(types.InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤", callback_data="noop"))
    if pending:
        lines.append("")
        lines.append("–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        for pid, ident, ident_type, created_by, created_at in pending:
            kb.row(
                types.InlineKeyboardButton(text=f"{ident_type}: {ident}", callback_data="noop"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"padm_del:{pid}:{gid}")
            )
    # Add controls
    kb.row(types.InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ ID", callback_data=f"adm_add_id:{gid}"))
    kb.row(types.InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ @username", callback_data=f"adm_add_username:{gid}"))
    kb.row(types.InlineKeyboardButton(text="+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data=f"adm_add_phone:{gid}"))
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_menu:{gid}"))
    await set_menu_message(callback.from_user.id, callback.message.chat.id, "\n".join(lines), kb.as_markup())

@dp.callback_query(lambda c: c.data and (c.data.startswith('adm_add_id:') or c.data.startswith('adm_add_username:') or c.data.startswith('adm_add_phone:')))
async def cb_admin_add_prompt(callback: types.CallbackQuery):
    await callback.answer()
    data = callback.data
    if data.startswith('adm_add_id:'):
        _, gid = data.split(':')
        what = ('id', '–≤–≤–µ–¥–∏—Ç–µ ID Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π)')
    elif data.startswith('adm_add_username:'):
        _, gid = data.split(':')
        what = ('username', '–≤–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    else:
        _, gid = data.split(':')
        what = ('phone', '–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)')
    gid_i = int(gid)
    prompt = await callback.message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {what[1]}")
    AWAITING_ADMIN_INPUT[callback.from_user.id] = {
        'gid': gid_i,
        'mode': 'add',
        'type': what[0],
        'edit_chat_id': callback.message.chat.id,
        'edit_message_id': callback.message.message_id,
        'prompt_message_id': prompt.message_id,
    }

@dp.callback_query(lambda c: c.data and c.data.startswith('adm_del:'))
async def cb_admin_delete(callback: types.CallbackQuery):
    _, uid, gid = callback.data.split(':')
    RoleRepo.remove_admin(int(uid), int(gid))
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    # refresh view without constructing fake CallbackQuery
    header, markup = build_admins_ui(int(gid))
    await set_menu_message(callback.from_user.id, callback.message.chat.id, header, markup)

@dp.callback_query(lambda c: c.data and c.data.startswith('padm_del:'))
async def cb_pending_admin_delete(callback: types.CallbackQuery):
    _, pid, gid = callback.data.split(':')
    RoleRepo.delete_pending(int(pid))
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    # refresh view without constructing fake CallbackQuery
    header, markup = build_admins_ui(int(gid))
    await set_menu_message(callback.from_user.id, callback.message.chat.id, header, markup)


# Notification actions
@dp.callback_query(lambda c: c.data and c.data.startswith('notif_add:'))
async def cb_notif_add(callback: types.CallbackQuery):
    _, gid, amount, unit = callback.data.split(':')
    gid_i = int(gid)
    amount_i = int(amount)
    # Add without custom message (None) and not default
    NotificationRepo.add_notification(gid_i, amount_i, unit, None, is_default=0)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ")
    # Refresh view in place
    header, markup = build_notifies_ui(gid_i)
    await set_menu_message(callback.from_user.id, callback.message.chat.id, header, markup)


@dp.callback_query(lambda c: c.data and c.data.startswith('notif_del:'))
async def cb_notif_del(callback: types.CallbackQuery):
    _, notif_id, gid = callback.data.split(':')
    NotificationRepo.delete_notification(int(notif_id))
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    # Refresh view in place
    header, markup = build_notifies_ui(int(gid))
    await set_menu_message(callback.from_user.id, callback.message.chat.id, header, markup)


@dp.callback_query(lambda c: c.data and c.data.startswith('notif_add_free:'))
async def cb_notif_add_free(callback: types.CallbackQuery):
    _, gid = callback.data.split(':')
    gid_i = int(gid)
    await callback.answer()
    prompt = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø—Ä–∏–º–µ—Ä: '1 –Ω–µ–¥–µ–ª—è', '2 –¥–Ω—è', '1 –¥–µ–Ω—å –∏ 3 —á–∞—Å–∞', '40 –º–∏–Ω—É—Ç', '1 —á–∞—Å 6 –º–∏–Ω—É—Ç')"
    )
    AWAITING_NOTIF_ADD[callback.from_user.id] = {
        'gid': gid_i,
        'edit_chat_id': callback.message.chat.id,
        'edit_message_id': callback.message.message_id,
        'prompt_message_id': prompt.message_id,
    }


@dp.message()
async def on_freeform_input(message: types.Message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    uid = message.from_user.id
    # 1) –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    ctx = AWAITING_NOTIF_ADD.get(uid)
    if ctx is not None:
        text = (message.text or '').strip()
        minutes = parse_duration_ru(text)
        if minutes <= 0:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: '2 –¥–Ω—è', '1 –¥–µ–Ω—å 3 —á–∞—Å–∞', '45 –º–∏–Ω—É—Ç'")
            return
        gid = ctx['gid']
        NotificationRepo.add_notification(gid, minutes, 'minutes', None, is_default=0)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        header, markup = build_notifies_ui(gid)
        try:
            await bot.edit_message_text(header, chat_id=ctx['edit_chat_id'], message_id=ctx['edit_message_id'], reply_markup=markup)
        except Exception:
            pass
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.delete_message(chat_id=ctx['edit_chat_id'], message_id=ctx['prompt_message_id'])
        except Exception:
            pass
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:
            pass
        # –û—á–∏—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ
        AWAITING_NOTIF_ADD.pop(uid, None)
        return

    # 2) –û–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    ectx = AWAITING_EVENT_CREATE.get(uid)
    if ectx is not None:
        mode = ectx.get('mode')
        if mode == 'create':
            step = ectx.get('step')
            if step == 'name':
                ectx['name'] = (message.text or '').strip()
                ectx['step'] = 'time'
                # rewrite prompt to next step and delete user's message
                try:
                    await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)", chat_id=ectx['edit_chat_id'], message_id=ectx['prompt_message_id'])
                except Exception:
                    pass
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except Exception:
                    pass
                return
            elif step == 'time':
                raw_time = (message.text or '').strip()
                gid = ectx['gid']
                # parse russian datetime
                dt = parse_ru_datetime(raw_time)
                if not dt:
                    # keep prompt, ask again
                    try:
                        await bot.edit_message_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: '22 —Å–µ–Ω—Ç—è–±—Ä—è 8 —É—Ç—Ä–∞', '22/09/2025 11 —á–∞—Å–æ–≤'", chat_id=ectx['edit_chat_id'], message_id=ectx['prompt_message_id'])
                    except Exception:
                        pass
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    except Exception:
                        pass
                    return
                time_store = dt.strftime('%Y-%m-%d %H:%M:%S')
                event_id = EventRepo.create(gid, ectx.get('name','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'), time_store)
                # Auto-create event notifications based on group settings
                EventNotificationRepo.create_from_group_defaults(event_id, gid)
                # refresh events list
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                events = EventRepo.list_by_group(gid)
                kb = InlineKeyboardBuilder()
                lines = [f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (ID –≥—Ä—É–ø–ø—ã {gid})"]
                if events:
                    for eid, name, time_str, resp_uid in events:
                        # format time nicely
                        time_disp = format_event_time_display(time_str)
                        if resp_uid:
                            u = UserRepo.get_by_id(resp_uid)
                            if u:
                                _iid, _tid, _uname, _phone, _first, _last = u
                                if _uname:
                                    who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{_uname}"
                                elif _first or _last:
                                    who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {(_first or '').strip()} {(_last or '').strip()}".strip()
                                else:
                                    who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {_tid}"
                            else:
                                who = f"–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_uid}"
                        else:
                            who = "–±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
                        lines.append(f"‚Ä¢ {name}\n{time_disp} | {who}")
                        kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å: {name}", callback_data=f"evt_open:{eid}:{gid}")
                    kb.adjust(1)
                else:
                    lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
                kb.row(types.InlineKeyboardButton(text="+ –°–æ–∑–¥–∞—Ç—å", callback_data=f"evt_create:{gid}"))
                kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_menu:{gid}"))
                try:
                    await bot.edit_message_text("\n".join(lines), chat_id=ectx['edit_chat_id'], message_id=ectx['edit_message_id'], reply_markup=kb.as_markup())
                except Exception:
                    pass
                # Cleanup prompt and user input
                try:
                    await bot.delete_message(chat_id=ectx['edit_chat_id'], message_id=ectx['prompt_message_id'])
                except Exception:
                    pass
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except Exception:
                    pass
                AWAITING_EVENT_CREATE.pop(uid, None)
                return
        elif mode == 'assign':
            val = (message.text or '').strip()
            user_row = None
            if val.startswith('@'):
                user_row = UserRepo.get_by_username(val)
            else:
                try:
                    tid = int(val)
                except ValueError:
                    tid = None
                if tid is not None:
                    user_row = UserRepo.get_by_telegram_id(tid)
            if not user_row:
                # delete user's input and update prompt to retry
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except Exception:
                    pass
                try:
                    await bot.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID Telegram –µ—â—ë —Ä–∞–∑", chat_id=ectx['edit_chat_id'], message_id=ectx['prompt_message_id'])
                except Exception:
                    pass
                return
            user_id_internal = user_row[0]
            EventRepo.set_responsible(ectx['eid'], user_id_internal)
            # refresh event view
            ev = EventRepo.get_by_id(ectx['eid'])
            if ev:
                _id, name, time_str, group_id, resp_uid = ev
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                kb = InlineKeyboardBuilder()
                # Role of current user
                urow2 = UserRepo.get_by_telegram_id(message.from_user.id)
                internal_user_id2 = urow2[0] if urow2 else None
                role2 = RoleRepo.get_user_role(internal_user_id2, group_id) if internal_user_id2 is not None else None
                # Admin controls
                if role2 in ("owner", "admin") or message.from_user.id == SUPERADMIN_ID:
                    kb.row(
                        types.InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"evt_rename:{_id}:{group_id}"),
                        types.InlineKeyboardButton(text="üïí –ò–∑–º. –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"evt_retime:{_id}:{group_id}")
                    )
                    kb.row(
                        types.InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_assign:{_id}:{group_id}"),
                        types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"evt_delete:{_id}:{group_id}")
                    )
                # Booking controls
                if not resp_uid:
                    kb.row(types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"evt_book_toggle:{_id}:{group_id}"))
                else:
                    if internal_user_id2 is not None and (internal_user_id2 == resp_uid or role2 in ("owner", "admin") or message.from_user.id == SUPERADMIN_ID):
                        kb.row(types.InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_unassign:{_id}:{group_id}"))
                # Group notifications for admins
                if internal_user_id2 and can_edit_event_notifications(internal_user_id2, _id):
                    kb.row(types.InlineKeyboardButton(text="üîî –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_notifications:{_id}:{group_id}"))
                # Personal notifications for responsible OR owner/admin/superadmin
                if internal_user_id2 and (
                    (resp_uid and internal_user_id2 == resp_uid)
                    or (role2 in ("owner", "admin") or message.from_user.id == SUPERADMIN_ID)
                ):
                    kb.row(types.InlineKeyboardButton(text="üì± –õ–∏—á–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_personal_notifications:{_id}:{group_id}"))
                kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_events:{group_id}"))
                if resp_uid:
                    u = UserRepo.get_by_id(resp_uid)
                    if u:
                        _iid, _tid, _uname, _phone, _first, _last = u
                        if _uname:
                            resp_text2 = f"@{_uname}"
                        elif _first or _last:
                            resp_text2 = f"{(_first or '').strip()} {(_last or '').strip()}".strip()
                        else:
                            resp_text2 = str(_tid)
                    else:
                        resp_text2 = str(resp_uid)
                else:
                    resp_text2 = '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                text = f"{name}\n–í—Ä–µ–º—è: {time_str}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_text2}"
                try:
                    await bot.edit_message_text(text, chat_id=ectx['edit_chat_id'], message_id=ectx['edit_message_id'], reply_markup=kb.as_markup())
                except Exception:
                    pass
            # Cleanup prompt and user input
            try:
                await bot.delete_message(chat_id=ectx['edit_chat_id'], message_id=ectx['prompt_message_id'])
            except Exception:
                pass
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception:
                pass
            AWAITING_EVENT_CREATE.pop(uid, None)
            return

    # 3) –û–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    actx = AWAITING_ADMIN_INPUT.get(uid)
    if actx is not None:
        gid = actx['gid']
        mode = actx['mode']
        if mode == 'add':
            id_type = actx['type']
            value = (message.text or '').strip()
            if id_type == 'id':
                try:
                    int(value)
                except ValueError:
                    await message.answer("–û–∂–∏–¥–∞–ª—Å—è —á–∏—Å–ª–æ–≤–æ–π ID")
                    return
                # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
                creator_row = UserRepo.get_by_telegram_id(uid)
                created_by = creator_row[0] if creator_row else None
                RoleRepo.add_pending_admin(gid, value, 'id', created_by_user=created_by or 0)
            elif id_type == 'username':
                if not value.startswith('@'):
                    await message.answer("–û–∂–∏–¥–∞–ª—Å—è @username")
                    return
                creator_row = UserRepo.get_by_telegram_id(uid)
                created_by = creator_row[0] if creator_row else None
                RoleRepo.add_pending_admin(gid, value.lstrip('@'), 'username', created_by_user=created_by or 0)
            else:
                creator_row = UserRepo.get_by_telegram_id(uid)
                created_by = creator_row[0] if creator_row else None
                RoleRepo.add_pending_admin(gid, value, 'phone', created_by_user=created_by or 0)
            # refresh admins view
            try:
                await bot.delete_message(chat_id=actx['edit_chat_id'], message_id=actx['prompt_message_id'])
            except Exception:
                pass
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception:
                pass
            # show updated admins without constructing fake Message/CallbackQuery
            header, markup = build_admins_ui(gid)
            try:
                await bot.edit_message_text(header, chat_id=actx['edit_chat_id'], message_id=actx['edit_message_id'], reply_markup=markup)
            except Exception:
                pass
            AWAITING_ADMIN_INPUT.pop(uid, None)
            return

    # 4) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if message.contact and message.from_user and message.contact.user_id == message.from_user.id:
        phone = message.contact.phone_number
        # –û–±–Ω–æ–≤–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω —é–∑–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã
        urow = UserRepo.get_by_telegram_id(message.from_user.id)
        if urow:
            UserRepo.update_phone(urow[0], phone)
            groups = RoleRepo.find_groups_for_pending(telegram_id=None, username=None, phone=phone)
            for gid in groups:
                RoleRepo.confirm_admin_if_pending(urow[0], gid)
            if groups:
                await message.answer(
                    f"–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω. –í–∞—à –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–∞—Ö: {', '.join(map(str, groups))}",
                    reply_markup=ReplyKeyboardRemove(),
                )
            else:
                await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("–°–ø–∞—Å–∏–±–æ, –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.", reply_markup=ReplyKeyboardRemove())

    # 5) –û–∂–∏–¥–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ / –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏)
    eedit = AWAITING_EVENT_EDIT.get(uid)
    if eedit is not None:
        mode = eedit['mode']
        eid = eedit['eid']
        gid = eedit['gid']
        if mode == 'rename':
            new_name = (message.text or '').strip()
            if not new_name:
                try:
                    await bot.edit_message_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.", chat_id=eedit['edit_chat_id'], message_id=eedit['prompt_message_id'])
                except Exception:
                    pass
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except Exception:
                    pass
                return
            EventRepo.update_name(eid, new_name)
            # refresh card directly
            ev = EventRepo.get_by_id(eid)
            if ev:
                _id, name, time_str, group_id, resp_uid = ev
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                kb = InlineKeyboardBuilder()
                # Role of current user
                urow2 = UserRepo.get_by_telegram_id(message.from_user.id)
                internal_user_id2 = urow2[0] if urow2 else None
                role2 = RoleRepo.get_user_role(internal_user_id2, gid) if internal_user_id2 is not None else None
                # Admin controls
                if role2 in ("owner", "admin") or message.from_user.id == SUPERADMIN_ID:
                    kb.row(
                        types.InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"evt_rename:{eid}:{gid}"),
                        types.InlineKeyboardButton(text="üïí –ò–∑–º. –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"evt_retime:{eid}:{gid}")
                    )
                    kb.row(
                        types.InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_assign:{eid}:{gid}"),
                        types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"evt_delete:{eid}:{gid}")
                    )
                # Booking controls
                if not resp_uid:
                    kb.row(types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"evt_book_toggle:{eid}:{gid}"))
                else:
                    if internal_user_id2 is not None and (internal_user_id2 == resp_uid or role2 in ("owner", "admin") or message.from_user.id == SUPERADMIN_ID):
                        kb.row(types.InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_unassign:{eid}:{gid}"))
                # Group notifications for admins
                if internal_user_id2 and can_edit_event_notifications(internal_user_id2, eid):
                    kb.row(types.InlineKeyboardButton(text="üîî –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_notifications:{eid}:{gid}"))
                # Personal notifications for responsible OR owner/admin/superadmin
                if internal_user_id2 and (
                    (resp_uid and internal_user_id2 == resp_uid)
                    or (role2 in ("owner", "admin") or message.from_user.id == SUPERADMIN_ID)
                ):
                    kb.row(types.InlineKeyboardButton(text="üì± –õ–∏—á–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_personal_notifications:{eid}:{gid}"))
                kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_events:{gid}"))
                # Personal notifications for responsible OR owner/admin/superadmin
                urow2 = UserRepo.get_by_telegram_id(message.from_user.id)
                internal_user_id2 = urow2[0] if urow2 else None
                role2 = RoleRepo.get_user_role(internal_user_id2, gid) if internal_user_id2 is not None else None
                if internal_user_id2 and (
                    (resp_uid and internal_user_id2 == resp_uid)
                    or (role2 in ("owner", "admin") or message.from_user.id == SUPERADMIN_ID)
                ):
                    kb.row(types.InlineKeyboardButton(text="üì± –õ–∏—á–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_personal_notifications:{eid}:{gid}"))
                # Personal notifications for responsible OR owner/admin/superadmin
                urow2 = UserRepo.get_by_telegram_id(message.from_user.id)
                internal_user_id2 = urow2[0] if urow2 else None
                role2 = RoleRepo.get_user_role(internal_user_id2, gid) if internal_user_id2 is not None else None
                if internal_user_id2 and (
                    (resp_uid and internal_user_id2 == resp_uid)
                    or (role2 in ("owner", "admin") or message.from_user.id == SUPERADMIN_ID)
                ):
                    kb.row(types.InlineKeyboardButton(text="üì± –õ–∏—á–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data=f"evt_personal_notifications:{eid}:{gid}"))
                if resp_uid:
                    u = UserRepo.get_by_id(resp_uid)
                    if u:
                        _iid, _tid, _uname, _phone, _first, _last = u
                        if _uname:
                            resp_text = f"@{_uname}"
                        elif _first or _last:
                            resp_text = f"{(_first or '').strip()} {(_last or '').strip()}".strip()
                        else:
                            resp_text = str(_tid)
                    else:
                        resp_text = str(resp_uid)
                else:
                    resp_text = '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                text = f"{name}\n–í—Ä–µ–º—è: {format_event_time_display(time_str)}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_text}"
                try:
                    await bot.edit_message_text(text, chat_id=eedit['edit_chat_id'], message_id=eedit['edit_message_id'], reply_markup=kb.as_markup())
                except Exception:
                    pass
            # cleanup
            try:
                await bot.delete_message(chat_id=eedit['edit_chat_id'], message_id=eedit['prompt_message_id'])
            except Exception:
                pass
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception:
                pass
            AWAITING_EVENT_EDIT.pop(uid, None)
            return
        elif mode == 'retime':
            raw = (message.text or '').strip()
            # Try explicit formats first
            dt = None
            for fmt in ("%d.%m.%Y %H:%M:%S", "%d.%m.%Y %H:%M", "%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M"):
                try:
                    dt = datetime.strptime(raw, fmt)
                    break
                except Exception:
                    pass
            if not dt:
                dt = parse_ru_datetime(raw)
            if not dt:
                try:
                    await bot.edit_message_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: '22 —Å–µ–Ω—Ç—è–±—Ä—è 8 —É—Ç—Ä–∞', '15.09.2025 00:00'", chat_id=eedit['edit_chat_id'], message_id=eedit['prompt_message_id'])
                except Exception:
                    pass
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except Exception:
                    pass
                return
            EventRepo.update_time(eid, dt.strftime('%Y-%m-%d %H:%M:%S'))
            # refresh card directly
            ev = EventRepo.get_by_id(eid)
            if ev:
                _id, name, time_str, group_id, resp_uid = ev
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                kb = InlineKeyboardBuilder()
                kb.row(
                    types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"evt_delete:{eid}:{gid}"),
                    types.InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_assign:{eid}:{gid}")
                )
                kb.row(
                    types.InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"evt_rename:{eid}:{gid}"),
                    types.InlineKeyboardButton(text="üïí –ò–∑–º. –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"evt_retime:{eid}:{gid}")
                )
                if resp_uid:
                    kb.row(
                        types.InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", callback_data=f"evt_unassign:{eid}:{gid}")
                    )
                kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grp_events:{gid}"))
                if resp_uid:
                    u = UserRepo.get_by_id(resp_uid)
                    if u:
                        _iid, _tid, _uname, _phone, _first, _last = u
                        if _uname:
                            resp_text = f"@{_uname}"
                        elif _first or _last:
                            resp_text = f"{(_first or '').strip()} {(_last or '').strip()}".strip()
                        else:
                            resp_text = str(_tid)
                    else:
                        resp_text = str(resp_uid)
                else:
                    resp_text = '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                text = f"{name}\n–í—Ä–µ–º—è: {format_event_time_display(time_str)}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp_text}"
                try:
                    await bot.edit_message_text(text, chat_id=eedit['edit_chat_id'], message_id=eedit['edit_message_id'], reply_markup=kb.as_markup())
                except Exception:
                    pass
            # cleanup
            try:
                await bot.delete_message(chat_id=eedit['edit_chat_id'], message_id=eedit['prompt_message_id'])
            except Exception:
                pass
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception:
                pass
            AWAITING_EVENT_EDIT.pop(uid, None)
            return

    # 4) –û–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    enctx = AWAITING_EVENT_NOTIF.get(uid)
    if enctx is not None:
        text = (message.text or '').strip()
        # Try relative duration first
        minutes = parse_duration_ru(text)
        if minutes <= 0:
            # Try absolute date/time of notification
            eid = enctx['eid']
            gid = enctx['gid']
            ev = EventRepo.get_by_id(eid)
            if not ev:
                await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            _id, _name, time_str, _group_id, _resp = ev
            nt = None
            for fmt in ("%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M:%S", "%d.%m.%Y %H:%M"):
                try:
                    nt = datetime.strptime(text, fmt)
                    break
                except Exception:
                    pass
            if nt is None:
                nt = dateparser.parse(text, languages=["ru"], settings={'DATE_ORDER': 'DMY'})
            if nt is None:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ä–æ–∫. –£–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '2 –¥–Ω—è' –∏–ª–∏ '18.09.2025 22:30'")
                return
            # parse event time to compute minutes before
            evt_dt = None
            for fmt in ("%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M:%S", "%d.%m.%Y %H:%M"):
                try:
                    evt_dt = datetime.strptime(time_str, fmt)
                    break
                except Exception:
                    pass
            if evt_dt is None:
                evt_dt = dateparser.parse(time_str, languages=["ru"], settings={'DATE_ORDER': 'DMY'})
            if evt_dt is None:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
                return
            delta = evt_dt - nt
            minutes = int(delta.total_seconds() // 60)
            if minutes <= 0:
                await message.answer("–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
                return
        eid = enctx['eid']
        gid = enctx['gid']
        EventNotificationRepo.add_notification(eid, minutes, 'minutes', f"–ß–µ—Ä–µ–∑ {format_duration_ru(minutes, 'minutes')} –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        # Refresh notifications view (no fake CallbackQuery)
        urow = UserRepo.get_by_telegram_id(uid)
        internal_user_id = urow[0] if urow else None
        if internal_user_id:
            await refresh_event_notifications_view_ids(enctx['edit_chat_id'], enctx['edit_message_id'], eid, gid, internal_user_id)
        # Cleanup prompt and user input
        try:
            await bot.delete_message(chat_id=enctx['edit_chat_id'], message_id=enctx['prompt_message_id'])
        except Exception:
            pass
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:
            pass
        AWAITING_EVENT_NOTIF.pop(uid, None)
        return

    # 5) –û–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    pnctx = AWAITING_PERSONAL_NOTIF.get(uid)
    if pnctx is not None:
        text = (message.text or '').strip()
        minutes = parse_duration_ru(text)
        if minutes <= 0:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: '2 –¥–Ω—è', '1 –¥–µ–Ω—å 3 —á–∞—Å–∞', '45 –º–∏–Ω—É—Ç'")
            return
        eid = pnctx['eid']
        gid = pnctx['gid']
        
        # Get user
        urow = UserRepo.get_by_telegram_id(uid)
        if not urow:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        internal_user_id = urow[0]
        
        PersonalEventNotificationRepo.add_notification(internal_user_id, eid, minutes, 'minutes', f"–ß–µ—Ä–µ–∑ {format_duration_ru(minutes, 'minutes')} –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        # Refresh personal notifications view (no fake CallbackQuery)
        await refresh_personal_notifications_view_ids(pnctx['edit_chat_id'], pnctx['edit_message_id'], eid, gid, internal_user_id)
        # Cleanup prompt and user input
        try:
            await bot.delete_message(chat_id=pnctx['edit_chat_id'], message_id=pnctx['prompt_message_id'])
        except Exception:
            pass
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:
            pass
        AWAITING_PERSONAL_NOTIF.pop(uid, None)
        return


def _register_group_if_needed_from_message(message: types.Message) -> None:
    if message.chat.type not in ("group", "supergroup"):
        return
    chat_id = str(message.chat.id)
    title = message.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    existing = GroupRepo.get_by_chat_id(chat_id)
    if existing:
        return
    user = message.from_user
    owner_user_id = UserRepo.upsert_user(
        telegram_id=user.id,
        username=user.username,
        phone=None,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    group_id = GroupRepo.create(chat_id, title, owner_user_id)
    RoleRepo.add_role(owner_user_id, group_id, 'owner', confirmed=True)
    # Add superadmin to the group as superadmin
    try:
        sa_row = UserRepo.get_by_telegram_id(SUPERADMIN_ID)
        if sa_row:
            RoleRepo.add_role(sa_row[0], group_id, 'superadmin', confirmed=True)
    except Exception:
        pass
    NotificationRepo.ensure_defaults(group_id)
    logging.info(f"Auto-registered group {chat_id} by message from user {user.id}")

# --- Generic logging handlers + auto-register on first message ---
@dp.message()
async def log_any_message(message: types.Message):
    logging.info(
        f"message: chat_type={message.chat.type}, chat_id={message.chat.id}, user_id={message.from_user.id}, "
        f"username={message.from_user.username}, text={message.text!r}"
    )
    try:
        _register_group_if_needed_from_message(message)
    except Exception as e:
        logging.exception(f"Failed to auto-register group from message: {e}")

@dp.chat_member()
async def log_chat_member(event: ChatMemberUpdated):
    logging.info(
        f"chat_member: chat_id={event.chat.id}, actor_id={getattr(event.from_user,'id',None)}, "
        f"old_status={getattr(event.old_chat_member,'status',None)}, new_status={event.new_chat_member.status}"
    )

@dp.callback_query()
async def log_callback(callback: types.CallbackQuery):
    logging.info(
        f"callback: chat_id={callback.message.chat.id if callback.message else None}, user_id={callback.from_user.id}, data={callback.data}"
    )


async def main():
    from database.init_db import init_db
    init_db()
    # Start scheduler for notifications
    try:
        from apscheduler.schedulers.asyncio import AsyncIOScheduler
    except Exception:
        # APScheduler might not be installed; skip silently
        await dp.start_polling(bot)
        return

    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

    async def tick_send_due():
        msk = ZoneInfo("Europe/Moscow")
        now = datetime.now(msk)
        now_iso = now.strftime('%Y-%m-%d %H:%M:%S')
        # Scan upcoming events in next 2 days to compute due notifications
        # (simple approach; can be optimized with SQL later)
        for gid_row in range(1):
            pass
        # Load all events
        # We don't have a repo to list all events; reuse groups and list_by_group
        # Iterate groups
        groups = []
        try:
            # Fetch all groups
            from services.repositories import get_conn
            with get_conn() as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, telegram_chat_id FROM groups")
                groups = cur.fetchall()
        except Exception:
            groups = []
        for gid, chat_id in groups:
            events = EventRepo.list_by_group(gid)
            for eid, name, time_str, resp_uid in events:
                # Parse event time (support with and without seconds)
                evt_dt = None
                for fmt in ('%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M'):
                    try:
                        evt_dt = datetime.strptime(time_str, fmt).replace(tzinfo=msk)
                        break
                    except Exception:
                        pass
                if evt_dt is None:
                    try:
                        evt_dt = datetime.fromisoformat(time_str).replace(tzinfo=msk)
                    except Exception:
                        # Skip if cannot parse
                        continue
                # Event notifications (group-level sends)
                for _, time_before, time_unit, message_text in EventNotificationRepo.list_by_event(eid):
                    # compute notify time
                    delta_minutes = 0
                    if time_unit == 'minutes':
                        delta_minutes = time_before
                    elif time_unit == 'hours':
                        delta_minutes = time_before * 60
                    elif time_unit == 'days':
                        delta_minutes = time_before * 1440
                    elif time_unit == 'weeks':
                        delta_minutes = time_before * 10080
                    elif time_unit == 'months':
                        delta_minutes = time_before * 43200
                    notify_dt = evt_dt - timedelta(minutes=delta_minutes)
                    # if it's due within the last minute window
                    if notify_dt <= now < (notify_dt + timedelta(minutes=1)):
                        # Debug log
                        print(f"[TICK] Group due: gid={gid}, eid={eid}, notify={notify_dt}, now={now}, tb={time_before}{time_unit}")
                        if not DispatchLogRepo.was_sent('event', user_id=None, group_id=gid, event_id=eid, time_before=time_before, time_unit=time_unit):
                            # Build group message per spec
                            # Build roles block (assigned/unassigned)
                            try:
                                from services.repositories import EventRoleRequirementRepo, EventRoleAssignmentRepo, DisplayNameRepo
                                role_reqs = EventRoleRequirementRepo.list_for_event(eid)
                                role_asg = EventRoleAssignmentRepo.list_for_event(eid)
                                asg_map = {}
                                for rname, uid in role_asg:
                                    asg_map.setdefault(rname, []).append(uid)
                                role_lines = []
                                for rname, _req in sorted(role_reqs, key=lambda x: x[0].lower()):
                                    assigned_uids = asg_map.get(rname, [])
                                    if assigned_uids:
                                        names = []
                                        for uid in assigned_uids:
                                            dn = DisplayNameRepo.get_display_name(gid, uid)
                                            if dn:
                                                names.append(dn)
                                            else:
                                                u = UserRepo.get_by_id(uid)
                                                if u and u[2]:
                                                    names.append(f"@{u[2]}")
                                                else:
                                                    names.append(str(uid))
                                        role_lines.append(f"‚úÖ {rname}: {', '.join(names)}")
                                    else:
                                        role_lines.append(f"üü° {rname}: —Å–≤–æ–±–æ–¥–Ω–æ")
                            except Exception:
                                role_lines = []

                            # Build message
                            lines = [
                                f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: \"{name}\"",
                                f"üïí {format_event_time_display(time_str)}",
                            ]
                            if role_lines:
                                lines.append("")
                                lines.append("–†–æ–ª–∏:")
                                lines.extend(role_lines)
                            else:
                                lines.append("")
                                lines.append("–†–æ–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã")
                            if message_text:
                                lines.append("")
                                lines.append(str(message_text))
                            text = "\n".join(lines)
                            # Build inline keyboard with per-role actions
                            from aiogram.utils.keyboard import InlineKeyboardBuilder
                            kb_ev = InlineKeyboardBuilder()
                            try:
                                from services.repositories import EventRoleRequirementRepo, EventRoleAssignmentRepo, DisplayNameRepo
                                reqs = EventRoleRequirementRepo.list_for_event(eid)
                                asgs = EventRoleAssignmentRepo.list_for_event(eid)
                                asg_map = {}
                                for r, uid in asgs:
                                    asg_map.setdefault(r, []).append(uid)
                                for rname, _req in sorted(reqs, key=lambda x: x[0].lower()):
                                    assigned = asg_map.get(rname, [])
                                    if assigned:
                                        # Show first assignee name (or count)
                                        uid = assigned[0]
                                        dn = DisplayNameRepo.get_display_name(gid, uid)
                                        label = dn if dn else f"ID:{uid}"
                                        btn_text = f"‚úÖ {rname}: {label}"
                                        # Allow unbook intent; handler will verify ownership
                                        kb_ev.row(types.InlineKeyboardButton(text=btn_text, callback_data=f"role_unbook:{eid}:{gid}:{rname}"))
                                    else:
                                        kb_ev.row(types.InlineKeyboardButton(text=f"üü¢ {rname}: –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"role_book:{eid}:{gid}:{rname}"))
                            except Exception:
                                pass
                            try:
                                await bot.send_message(int(chat_id), text, reply_markup=kb_ev.as_markup())
                            except Exception:
                                try:
                                    await bot.send_message(chat_id, text, reply_markup=kb_ev.as_markup())
                                except Exception:
                                    pass
                            DispatchLogRepo.mark_sent('event', user_id=None, group_id=gid, event_id=eid, time_before=time_before, time_unit=time_unit)
                # Personal notifications (DM to users)
                from services.repositories import get_conn
                with get_conn() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT user_id, time_before, time_unit, message_text FROM personal_event_notifications WHERE event_id = ?", (eid,))
                    personals = cur.fetchall()
                for user_id, time_before, time_unit, message_text in personals:
                    # compute notify time
                    delta_minutes = 0
                    if time_unit == 'minutes':
                        delta_minutes = time_before
                    elif time_unit == 'hours':
                        delta_minutes = time_before * 60
                    elif time_unit == 'days':
                        delta_minutes = time_before * 1440
                    elif time_unit == 'weeks':
                        delta_minutes = time_before * 10080
                    elif time_unit == 'months':
                        delta_minutes = time_before * 43200
                    notify_dt = evt_dt - timedelta(minutes=delta_minutes)
                    if notify_dt <= now < (notify_dt + timedelta(minutes=1)):
                        print(f"[TICK] Personal due: eid={eid}, uid={user_id}, notify={notify_dt}, now={now}, tb={time_before}{time_unit}")
                        if not DispatchLogRepo.was_sent('personal', user_id=user_id, group_id=None, event_id=eid, time_before=time_before, time_unit=time_unit):
                            u = UserRepo.get_by_id(user_id)
                            if u:
                                _iid, _tid, _uname, _phone, _first, _last = u
                                # Build personal message per spec
                                grp_row = GroupRepo.get_by_id(gid)
                                group_title = grp_row[2] if grp_row else f"–ì—Ä—É–ø–ø–∞ {gid}"
                                # Find user's roles for this event
                                try:
                                    from services.repositories import EventRoleAssignmentRepo
                                    user_roles = [r for r, uid in EventRoleAssignmentRepo.list_for_event(eid) if uid == user_id]
                                except Exception:
                                    user_roles = []
                                role_info = f"–†–æ–ª–∏: {', '.join(user_roles)}" if user_roles else "–†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                                lines = [
                                    f"üîî –õ–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ \"{group_title}\"",
                                    f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: \"{name}\"",
                                    f"üïí {format_event_time_display(time_str)}",
                                    role_info,
                                ]
                                if message_text:
                                    lines.append("")
                                    lines.append(str(message_text))
                                text = "\n".join(lines)
                                try:
                                    await bot.send_message(_tid, text)
                                    DispatchLogRepo.mark_sent('personal', user_id=user_id, group_id=None, event_id=eid, time_before=time_before, time_unit=time_unit)
                                except Exception:
                                    pass

    scheduler.add_job(tick_send_due, 'interval', minutes=1, id='notify_tick')
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
